<?php

namespace App\NCUO\EifBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * FormRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FormRepository extends EntityRepository
{
    
   /**
     * Функция вывода списка форм по блокам
     */
    
    public function getDataByBlocks($protocol, $start, $length, $search_str) {
        $em = $this->getEntityManager();
        
        // Получаем общее кол-во строк
        $total_cnt = $em->createQuery(
            '
            SELECT COUNT(f)
            FROM NCUOEifBundle:Form f
            WHERE f.protocol = :id
                AND LOWER(f.form_name) LIKE LOWER(:search_str)
            '
        )
        ->setParameter('id', $protocol)
        ->setParameter('search_str', '%' . $search_str . '%')
        ->getSingleScalarResult();
        
        // Получаем выборку строк в заданном диапазоне
        $data = $em->createQuery(
            '
            SELECT f
            FROM NCUOEifBundle:Form f
            WHERE f.protocol = :id
                AND LOWER(f.form_name) LIKE LOWER(:search_str)
            ORDER BY f.form_create_date ASC
            '
        )
        ->setParameter('id', $protocol)
        ->setParameter('search_str', '%' . $search_str . '%')
        ->setFirstResult($start)
        ->setMaxResults($length)
        ->getResult();
        
        return [
            'total_cnt' => $total_cnt,
            'data' => $data
        ];
    }     
    
    /**
     * Функция создания таблицы хранения данных формы
     */
    
    public function createDBTable($form) {
        $em   = $this->getEntityManager();
        $conn = $em->getConnection();                 
        
        $id_form = $form->getIdForm();
        
        $cmd = "CREATE TABLE eif_forms_data.\"_{$id_form}\"(id_row uuid NOT NULL, id_file uuid NOT NULL, del_flag integer NOT NULL, ";
        
        // Получаем количество полей формы
        $f_cnt = $em->getRepository('NCUOEifBundle:FormField')->getFieldsCnt($form);
        for($i = 1; $i <= $f_cnt; $i++)
            $cmd .= 'f' . $i . ' text, ';
        
        $cmd .= "num_row bigint NOT NULL, migration_flag integer NOT NULL, CONSTRAINT \"pk_{$id_form}\" PRIMARY KEY (id_row), CONSTRAINT \"fk_{$id_form}_id_file\" FOREIGN KEY (id_file) REFERENCES eif.files (id_file) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION) WITH (OIDS = FALSE);";
        $cmd .= "CREATE INDEX \"_{$id_form}_id_file_idx\" ON eif_forms_data.\"_{$id_form}\" USING btree(id_file);";
        
        // Создаем таблицу
        $conn->executeUpdate("DROP TABLE IF EXISTS eif_forms_data.\"_{$id_form}\"");
        $conn->executeUpdate($cmd);
    }
    
    /**
     * Функция удаления таблицы хранения данных формы
     */
 
    public function dropDBTable($form) {
        $this->getEntityManager()->getConnection()->executeUpdate("DROP TABLE IF EXISTS eif_forms_data.\"_{$form->getIdForm()}\"");
    }
    
    /**
     * Функция очистики таблицы хранения данных формы
     */
    
    public function truncDBTable($form) {
        $this->getEntityManager()->getConnection()->executeUpdate("TRUNCATE TABLE eif_forms_data.\"_{$form->getIdForm()}\"");
    }
    
    /**
     * Функция загрузки данных в таблицу хранения для формы
     */
    
    public function insertToDBTable(&$arr_cmds) {
        $conn = $this->getEntityManager()->getConnection();
        
        try {
            $conn->beginTransaction();                
            foreach($arr_cmds as $arr_cmd) {
                $ins_cmd = $arr_cmd['ins_cmd'];
                
                foreach(array_chunk($arr_cmd['arr_vals'], 20) as $vals) {
                    $conn->executeUpdate($ins_cmd . implode(',', $vals));
                }            
            }        
            $conn->commit();            
        } catch (\Exception $ex) {
            $conn->rollBack();
            throw $ex;
        }
    }
    
    /**
     * Функция удаления данных из таблицы хранения формы по файлу
     */
    
    public function delFromDBTable($form, $file) {
        $stmt = $this->getEntityManager()->getConnection()->prepare("DELETE FROM eif_forms_data.\"_{$form->getIdForm()}\" WHERE id_file = :id_file");
        $stmt->bindValue('id_file', $file->getIdFile());
        $stmt->execute();        
    }
    
    /**
     * Функция проверки наличия строк в таблице хранения для формы
     */
    
    public function hasRowsDBTable($form) {
        return $this->getEntityManager()->getConnection()->executeQuery("SELECT COUNT(*) AS cnt FROM (SELECT 1 FROM eif_forms_data.\"_{$form->getIdForm()}\" LIMIT 1) AS t")->fetchAll()[0]['cnt'];
    }
    
    /**
     * Функция выборки данных из таблицы хранения формы по импортированным файлам
     */
    
    public function getDBTableData($form, $file, $columns, $order, $start, $length) {
        $em     = $this->getEntityManager();
        $conn   = $em->getConnection();
                
        // Получаем записи по заданным условиям
        
        // Формируем запрос
         
        // Добавляем поля
        $f_cnt = $em->getRepository('NCUOEifBundle:FormField')->getFieldsCnt($form);
        $sql_fields = '';
        for($i = 1; $i <= $f_cnt; $i++)
            $sql_fields .= "CASE WHEN del_flag = 0 THEN f{$i} ELSE '<p style=\"text-decoration: line-through;\">' || f{$i} || '</p>' END AS f{$i}" . ($i == $f_cnt ? ' ' : ', ');
        
        // Добавляем таблицу
        $sql_from = "FROM eif_forms_data.\"_{$form->getIdForm()}\" ";
        
        // Добавляем условие по файлу
        $sql_where = 'WHERE id_file = :id_file ';
        
        // Добавляем условие поиска по столбцу
        foreach($columns as $col) {
            $val = $col['search']['value'];
            if ($val != '')
                $sql_where .= 'AND upper(f' . ($col['data'] + 1) . sprintf(") LIKE '%%' || upper('%s') || '%%' ", str_replace('\'', '\'\'', $val));
        }
        
        // Добавляем сортировку
        $sql_order = '';
        if (is_null($order))
            $sql_order .= 'ORDER BY num_row ';
        else {
            $sql_order .= 'ORDER BY ';
            foreach($order as $ord_item)
                $sql_order .= 'f' . ($ord_item['column'] + 1) . ' ' . $ord_item['dir'] . ', ';       // Поля в таблице формы начинаются с 1-цы, в DataTables c 0
            $sql_order = substr($sql_order, 0, strlen($sql_order) - 2) . ' '; // Удаляем последнюю запятую после поля сортировки
        }
        
        // Добавляем смещение и предел
        $sql_lo = 'LIMIT :lim OFFSET :offs';
        
        // Подсчитываем сначала кол-во записей всего
        $stmt = $conn->prepare('SELECT COUNT(*) AS cnt ' . $sql_from . $sql_where);
        $stmt->bindValue('id_file', $file->getIdFile());
        $stmt->execute();
        
        $total_cnt = $stmt->fetchAll()[0]['cnt'];
        
        // Собираем запрос для данных
        $stmt = $conn->prepare('SELECT ' . $sql_fields . $sql_from . $sql_where . $sql_order . $sql_lo);
        $stmt->bindValue('id_file', $file->getIdFile());
        $stmt->bindValue('lim', $length);
        $stmt->bindValue('offs', $start);
        
        $stmt->execute();
        
        $res = [];
        foreach($stmt->fetchAll() as $row)
            $res[] = array_values($row);
        
        return ['total_cnt' => $total_cnt, 'data' => $res];
    }
    
    /**
     * Функция выборки данных из таблицы хранения формы по дате актуальности
     */
    
    public function getDBTableDataAct($form, $key_fields, $dt_from, $dt_to, $columns, $order, $start, $length) {
        $em     = $this->getEntityManager();
        $conn   = $em->getConnection();
                
        // Получаем записи по заданным условиям
        
        /*
         Пример запроса:
            select
                *
            from	
                (
                    select
                          t1.*
                        , sum(del_flag) over (partition by t1.f1) as total_del_flag				-- По ключевым полям записи (в данном случае f1) получаем признак, что запись была удалена во временном диапазоне выборки
                        , row_number() over (partition by t1.f1 order by t1.file_upload_date desc) as rn	-- По ключевым полям записи получаем самую последнюю запись во временном диапазоне выборки
                    from
                        (
                            -- Выбираем всю информацию из формы до заданной даты
                            select
                                t.*, fl.file_upload_date
                            from
                                  eif_forms_data."_7ac439d8-7d98-4340-9e5a-0db321c36123" t
                                , eif.files fl
                            where
                                    t.id_file = fl.id_file
                                and fl.file_upload_date <= to_date('01.01.2016', 'DD.MM.YYYY')
                        ) t1
                ) t2
            where
                t2.rn = 1 and t2.total_del_flag = 0	-- Выбираем самые последние не удаленные записи         
         */
        
        // Формируем список ключевых полей
        $sql_key_fields = '';
        foreach($key_fields as $key_field) {
            $sql_key_fields .= "t1.f{$key_field->getFieldPos()}, ";
        }
        $sql_key_fields = substr($sql_key_fields, 0, strlen($sql_key_fields) - 2);
        
        // Формируем подзапрос выборки информации из таблиц
        $sql_from =
        "
        FROM	
            (
                SELECT
                      t1.*
                    , sum(del_flag) over (partition by {$sql_key_fields}) as total_del_flag
                    , row_number() over (partition by {$sql_key_fields} order by t1.file_upload_date desc) as rn
                FROM
                    (
                        SELECT
                            t.*, fl.file_upload_date
                        FROM
                              eif_forms_data.\"_{$form->getIdForm()}\" t
                            , eif.files fl
                        WHERE
                                t.id_file = fl.id_file
                            and fl.file_upload_date >= to_date('{$dt_from}', 'DD.MM.YYYY')
                            and fl.file_upload_date <= to_date('{$dt_to}', 'DD.MM.YYYY') + 1
                    ) t1
            ) t2        
         ";
                 
        // Добавляем поля
        $f_cnt = $em->getRepository('NCUOEifBundle:FormField')->getFieldsCnt($form);
        $sql_fields = '';
        for($i = 1; $i <= $f_cnt; $i++)
            $sql_fields .= "f{$i}" . ($i == $f_cnt ? ' ' : ', ');
                
        // Добавляем условие последней не удаленной записи
        $sql_where = 'WHERE t2.rn = 1 and t2.total_del_flag = 0 ';
        
        // Добавляем условие поиска по столбцу
        foreach($columns as $col) {
            $val = $col['search']['value'];
            if ($val != '')
                $sql_where .= 'AND upper(f' . ($col['data'] + 1) . sprintf(") LIKE '%%' || upper('%s') || '%%' ", str_replace('\'', '\'\'', $val));
        }
        
        // Добавляем сортировку
        $sql_order = '';
        if (is_null($order))
            $sql_order .= 'ORDER BY num_row ';
        else {
            $sql_order .= 'ORDER BY ';
            foreach($order as $ord_item)
                $sql_order .= 'f' . ($ord_item['column'] + 1) . ' ' . $ord_item['dir'] . ', ';       // Поля в таблице формы начинаются с 1-цы, в DataTables c 0
            $sql_order = substr($sql_order, 0, strlen($sql_order) - 2) . ' '; // Удаляем последнюю запятую после поля сортировки
        }
        
        // Добавляем смещение и предел
        $sql_lo = 'LIMIT :lim OFFSET :offs';
        
        // Подсчитываем сначала кол-во записей всего
        $stmt = $conn->prepare('SELECT COUNT(*) AS cnt ' . $sql_from . $sql_where);
        $stmt->execute();
        
        $total_cnt = $stmt->fetchAll()[0]['cnt'];
        
        // Собираем запрос для данных
        $stmt = $conn->prepare('SELECT ' . $sql_fields . $sql_from . $sql_where . $sql_order . $sql_lo);
        $stmt->bindValue('lim', $length);
        $stmt->bindValue('offs', $start);
        
        $stmt->execute();
        
        $res = [];
        foreach($stmt->fetchAll() as $row)
            $res[] = array_values($row);
        
        return ['total_cnt' => $total_cnt, 'data' => $res];
    }    
    
    /**
     * Функция получения формы с учетом пользователя ФОИВ/РОИВ
     */
    
    public function findByUser($id_form, $foiv_roiv_flag, $fr_obj) {
        $em = $this->getEntityManager();
        
        if ($foiv_roiv_flag == 'FOIV') {
            return $em->createQuery(
                '
                SELECT f
                FROM NCUOEifBundle:Form f
                WHERE f.id_form = :id_form
                    AND f.protocol IN (
                        SELECT p
                        FROM NCUOEifBundle:Protocol p
                        WHERE p.source IN
                            (SELECT s FROM NCUOEifBundle:Source s WHERE s.foiv = :id_foiv)
                    ) 
                '
            )
            ->setParameter('id_form', $id_form)
            ->setParameter('id_foiv', $fr_obj)
            ->getOneOrNullResult();
        } else {
            return $em->createQuery(
                '
                SELECT f
                FROM NCUOEifBundle:Form f
                WHERE f.id_form = :id_form
                    AND f.protocol IN (
                        SELECT p
                        FROM NCUOEifBundle:Protocol p
                        WHERE p.source IN
                            (SELECT s FROM NCUOEifBundle:Source s WHERE s.roiv = :id_roiv)
                    ) 
                '
            )
            ->setParameter('id_form', $id_form)
            ->setParameter('id_roiv', $fr_obj)
            ->getOneOrNullResult();            
        }
    }
    
    /**
     * Функция получения общего количества форм
     */
    
    public function getTotalCount() {
        return $this->getEntityManager()->createQuery('SELECT COUNT(f) FROM NCUOEifBundle:Form f')->getSingleScalarResult();
    }
    
    /**
     * Функция получения информци по контролю актуальности данных форм
     */
    
    public function getDataActControlInfo() {
        $em     = $this->getEntityManager();
        $conn   = $em->getConnection();
        
        $stmt = $conn->prepare(
        "
        select
              s.id_source
            , s.source_name
            , p.id_protocol
            , p.protocol_name
            , f.id_form
            , f.form_name
            /*
            , f.data_act_control_interval
            , f_dt.last_form_date
            , f_dt.last_form_date + interval '1 minute' * f.data_act_control_interval
            */
            , case
                when f.data_act_control_interval is null then 'Нет'
                else
                    case
                        when f.data_act_control_interval = 0 then 'Да'
                        else
                            case
                                when coalesce(f_dt.last_form_date, to_timestamp('01.01.1970 00:00:00', 'DD.MM.YYYY HH24:MI:SS')) + interval '1 minute' * f.data_act_control_interval < now()::timestamp(0) then 'Нет'
                                else 'Да'
                            end
                    end
              end as form_act_flag
        from
              eif.sources   s
              left join eif.protocols p on p.id_source = s.id_source
              left join eif.forms f on f.id_protocol = p.id_protocol
              left join
              (
                -- Получаем идентификатор формы с последней датой загрузки в нее
                select
                      id_form
                    , file_upload_date as last_form_date
                from
                    (
                        select
                              l.id_form
                            , f.file_upload_date
                            , row_number() over (partition by l.id_form order by f.file_upload_date desc) as rn
                        from
                              eif.files_forms_import_log l
                            , eif.files f
                        where
                            l.id_file = f.id_file
                    ) t1
                where
                    t1.rn = 1	  
              ) f_dt on f.id_form = f_dt.id_form
        order by
              s.source_create_date
            , p.protocol_sign_date
            , p.protocol_name
            , f.form_create_date
        "
        );
        $stmt->execute();
        
        return $stmt->fetchAll();
    }
}