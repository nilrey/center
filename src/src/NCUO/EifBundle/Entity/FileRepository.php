<?php

namespace App\NCUO\EifBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * FileRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FileRepository extends EntityRepository
{
    
   /**
     * Функция вывода списка файлов по блокам
     */
    
    public function getDataByBlocks($protocol, $start, $length, $search_str) {
        $em = $this->getEntityManager();
        
        // Получаем общее кол-во строк
        $total_cnt = $em->createQuery(
            '
            SELECT COUNT(f)
            FROM NCUOEifBundle:File f
            WHERE f.protocol = :id
                AND LOWER(f.file_name) LIKE LOWER(:search_str)
            '
        )
        ->setParameter('id', $protocol)
        ->setParameter('search_str', '%' . $search_str . '%')
        ->getSingleScalarResult();
        
        // Получаем выборку строк в заданном диапазоне
        $data = $em->createQuery(
            '
            SELECT f
            FROM NCUOEifBundle:File f
            WHERE f.protocol = :id
                AND LOWER(f.file_name) LIKE LOWER(:search_str)
            ORDER BY f.file_upload_date DESC
            '
        )
        ->setParameter('id', $protocol)
        ->setParameter('search_str', '%' . $search_str . '%')
        ->setFirstResult($start)
        ->setMaxResults($length)
        ->getResult();
        
        return array(
            'total_cnt' => $total_cnt,
            'data' => $data
        );
    }     
    
    /**
     * Функция получения списка файлов по протоколу в заданном статусе и диапазоне дат загрузке
     */
    
    public function getFileListBy_Protocol_Status_Date($protocol, $status, $order, $dt_start, $dt_end) {
        return $this->getEntityManager()
                ->createQuery(
                    "SELECT f FROM NCUOEifBundle:File f
                     WHERE f.protocol = :id_protocol AND f.file_status = :id_status AND f.file_upload_date BETWEEN :dt_start AND :dt_end
                     ORDER BY f.file_upload_date " . $order
                )
                ->setParameter('id_protocol', $protocol)
                ->setParameter('id_status', $status)
                ->setParameter('dt_start', $dt_start)
                ->setParameter('dt_end', $dt_end->add(new \DateInterval('P1D')))
                ->getResult();
    }
    
    /**
     * Функция получения списка файлов по протоколу в заданном статусе
     */
    
    public function getFileListBy_Protocol_Status($protocol, $status) {
        return $this->getEntityManager()
                ->createQuery('SELECT f FROM NCUOEifBundle:File f WHERE f.protocol = :id_protocol AND f.file_status = :id_status')
                ->setParameter('id_protocol', $protocol)
                ->setParameter('id_status', $status)
                ->getResult();
    }
    
    /**
     * Функция получения списка файлов в заданном статусе
     */
    
    public function getFileListBy_Status($status) {
        return $this->getEntityManager()
                ->createQuery('SELECT f FROM NCUOEifBundle:File f WHERE f.file_status = :id_status')
                ->setParameter('id_status', $status)
                ->getResult();        
    }
	
	/**
	 * Функция получения списка файлов для выгрузки в Капитан
	 */
    
	public function getFileCapiDumpList() {
		return $this->getEntityManager()->createQuery(
			'
			SELECT
				f
			FROM
				NCUOEifBundle:File f JOIN f.protocol p
			WHERE
					p.enable_migration = 1
				and f.migration_flag = 0
			'
		)
		->getResult();		
	}
	
    /**
     * Функция получения файла с учетом пользователя ФОИВ/РОИВ
     */
    
    public function findByUser($id_file, $foiv_roiv_flag, $fr_obj) {
        $em = $this->getEntityManager();
        
        if ($foiv_roiv_flag == 'FOIV') {
            return $em->createQuery(
                '
                SELECT f
                FROM NCUOEifBundle:File f
                WHERE f.id_file = :id_file
                    AND f.protocol IN (
                        SELECT p
                        FROM NCUOEifBundle:Protocol p
                        WHERE p.source IN
                            (SELECT s FROM NCUOEifBundle:Source s WHERE s.foiv = :id_foiv)
                    ) 
                '
            )
            ->setParameter('id_file', $id_file)
            ->setParameter('id_foiv', $fr_obj)
            ->getOneOrNullResult();
        } else {
            return $em->createQuery(
                '
                SELECT f
                FROM NCUOEifBundle:File f
                WHERE f.id_file = :id_file
                    AND f.protocol IN (
                        SELECT p
                        FROM NCUOEifBundle:Protocol p
                        WHERE p.source IN
                            (SELECT s FROM NCUOEifBundle:Source s WHERE s.roiv = :id_roiv)
                    ) 
                '
            )
            ->setParameter('id_file', $id_file)
            ->setParameter('id_roiv', $fr_obj)
            ->getOneOrNullResult();            
        }
    }
    
    /**
     * Функция получения общего количества файлов
     */
    
    public function getTotalCount() {
        return $this->getEntityManager()->createQuery('SELECT COUNT(f) FROM NCUOEifBundle:File f')->getSingleScalarResult();
    }
    
    /**
     * Функция получения статистики по загруженным файлам за период
     */
    
    public function getCountByPeriod($dt_start, $dt_end) {
        $conn = $this->getEntityManager()->getConnection();
        $stmt = $conn->prepare(
        "
            select
                  t1.dt			        as label
                , coalesce(t2.cnt, 0)	as y
            from
                (select to_char(i::date, 'DD.MM.YYYY') as dt from generate_series(to_date(:dt_start, 'DD.MM.YYYY'), to_date(:dt_end, 'DD.MM.YYYY'), '1 day'::interval) i) t1
                left join
                (
                    select
                          to_char(f.file_upload_date, 'DD.MM.YYYY') as dt
                        , count(f.*) as cnt
                    from
                        eif.files f
                    where
                        f.file_upload_date between to_date(:dt_start, 'DD.MM.YYYY') and to_date(:dt_end, 'DD.MM.YYYY') + 1
                    group by
                        to_char(f.file_upload_date, 'DD.MM.YYYY')
                ) t2
                on t1.dt = t2.dt
            order by
                to_date(t1.dt, 'DD.MM.YYYY')
        ");
        $stmt->bindValue('dt_start', $dt_start);
        $stmt->bindValue('dt_end', $dt_end);
        $stmt->execute();        
        return $stmt->fetchAll();
    }
    
    /**
     * Функция получения статистики по статусам загруженных файлов
     */
    
    public function getStatusCount() {
        $conn = $this->getEntityManager()->getConnection();
        $stmt = $conn->prepare(
        "
            select
                  sum(1)                                                                           as cnt_all
                , sum(case when fs.status_name = 'Загружен' then 1 else 0 end)                     as cnt_upl
                , sum(case when fs.status_name = 'В очереди на импорт' then 1 else 0 end)          as cnt_que
                , sum(case when fs.status_name = 'Импортирование' then 1 else 0 end)               as cnt_imp
                , sum(case when fs.status_name = 'Импортирован в формы данных' then 1 else 0 end)  as cnt_done
                , sum(case when fs.status_name = 'Ошибка' then 1 else 0 end)                       as cnt_err
            from
                  eif.files f
                , eif.file_statuses fs
            where
                f.id_status = fs.id_status
        ");
        $stmt->execute();        
        return $stmt->fetchAll()[0];
    }
    
    /**
     * Функция получения списка файлов со статусом Ошибка
     */
    
    public function getErrorStatusFilesDataByBlocks($start, $length) {
        $em = $this->getEntityManager();
        
		$err_status = $em->getRepository('NCUOEifBundle:FileStatus')->findOneBy(['status_name' => 'Ошибка']);
		
        // Получаем общее кол-во строк
        $total_cnt = $em->createQuery(
            'SELECT COUNT(f) FROM NCUOEifBundle:File f WHERE f.file_status = :id'
        )
        ->setParameter('id', $err_status)
        ->getSingleScalarResult();
        
        // Получаем выборку строк в заданном диапазоне
        $data = $em->createQuery(
            'SELECT f FROM NCUOEifBundle:File f WHERE f.file_status = :id ORDER BY f.file_upload_date DESC'
        )
        ->setParameter('id', $err_status)
        ->setFirstResult($start)
        ->setMaxResults($length)
        ->getResult();
        
        return array(
            'total_cnt' => $total_cnt,
            'data' => $data
        );	
    }
    
    /**
     * Функция удаления записей по файлу из лога импорта
     */
    
    public function deleteFromImportLog($file) {
        $stmt = $this->getEntityManager()->getConnection()->prepare("DELETE FROM eif.files_forms_import_log WHERE id_file = :id_file");
        $stmt->bindValue('id_file', $file->getIdFile());
        $stmt->execute();         
    }
}
