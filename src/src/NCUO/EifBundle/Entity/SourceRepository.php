<?php

namespace App\NCUO\EifBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * SourceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class SourceRepository extends EntityRepository
{
    
    /**
     * Функция вывода всего списка источников по блокам
     */
    
    public function getDataByBlocks($start, $length, $search_str) {
        $em = $this->getEntityManager();
        
        // Получаем общее кол-во строк
        $total_cnt = $em->createQuery(
            '
            SELECT COUNT(s)
            FROM NCUOEifBundle:Source s
            WHERE LOWER(s.source_name) LIKE LOWER(:search_str)
            '
        )
        ->setParameter('search_str', '%' . $search_str . '%')
        ->getSingleScalarResult();
        
        // Получаем выборку строк в заданном диапазоне
        $data = $em->createQuery(
            '
            SELECT s
            FROM NCUOEifBundle:Source s
            WHERE LOWER(s.source_name) LIKE LOWER(:search_str)
            ORDER BY s.source_create_date ASC
            '
        )
        ->setParameter('search_str', '%' . $search_str . '%')
        ->setFirstResult($start)
        ->setMaxResults($length)
        ->getResult();
        
        return array(
            'total_cnt' => $total_cnt,
            'data' => $data
        );
    }
    
    /*
     * Функция вывода списка источников по блокам с учетом привязки пользователя
     */
       
    public function getDataByBlocksByUser($start, $length, $foiv_roiv_flag, $fr_obj, $search_str) {
        $em = $this->getEntityManager();
        
        // Получаем общее кол-во строк и выборку в заданном диапазоне
        if ($foiv_roiv_flag == 'FOIV') {
            $total_cnt = $em->createQuery(
                '
                SELECT COUNT(s)
                FROM NCUOEifBundle:Source s
                WHERE s.foiv = :id_foiv
                    AND LOWER(s.source_name) LIKE LOWER(:search_str)
                '
            )
            ->setParameter('id_foiv', $fr_obj)
            ->setParameter('search_str', '%' . $search_str . '%')
            ->getSingleScalarResult();
            
            $data = $em->createQuery(
                '
                SELECT s
                FROM NCUOEifBundle:Source s
                WHERE s.foiv = :id_foiv
                    AND LOWER(s.source_name) LIKE LOWER(:search_str)
                ORDER BY s.source_create_date ASC
                '
            )
            ->setParameter('id_foiv', $fr_obj)
            ->setParameter('search_str', '%' . $search_str . '%')                    
            ->setFirstResult($start)
            ->setMaxResults($length)
            ->getResult();
        }
        else {
            $total_cnt = $em->createQuery(
                '
                SELECT COUNT(s)
                FROM NCUOEifBundle:Source s
                WHERE s.roiv = :id_roiv
                    AND LOWER(s.source_name) LIKE LOWER(:search_str)
                '
            )
            ->setParameter('id_roiv', $fr_obj)
            ->setParameter('search_str', '%' . $search_str . '%')
            ->getSingleScalarResult();
            
            $data = $em->createQuery(
                '
                SELECT s
                FROM NCUOEifBundle:Source s
                WHERE s.roiv = :id_roiv
                    AND LOWER(s.source_name) LIKE LOWER(:search_str)                
                ORDER BY s.source_create_date ASC
                '
            )
            ->setParameter('id_roiv', $fr_obj)
            ->setParameter('search_str', '%' . $search_str . '%')                    
            ->setFirstResult($start)
            ->setMaxResults($length)
            ->getResult();
        }
        
        return array(
            'total_cnt' => $total_cnt,
            'data' => $data
        );        
    }
    
    /**
     * Функция получения общего количества источников
     */
    
    public function getTotalCount() {
        return $this->getEntityManager()->createQuery('SELECT COUNT(f) FROM NCUOEifBundle:Source f')->getSingleScalarResult();
    }
    
    /**
     * Функция получения количества источников по привязке ФОИВ/РОИВ
     */
    
    public function getFoivRoivCount() {
        $conn = $this->getEntityManager()->getConnection();
        $stmt = $conn->prepare(
        '
            select
                sum(1) as cnt_all,
                sum(case when id_foiv is not null and id_roiv is null then 1 else 0 end) as cnt_foiv,
                sum(case when id_foiv is null and id_roiv is not null then 1 else 0 end) as cnt_roiv,
                sum(case when id_foiv is null and id_roiv is null then 1 else 0 end) as cnt_none
            from
                eif.sources                              
        ');
        $stmt->execute();        
        return $stmt->fetchAll()[0];
    }
}
