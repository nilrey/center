<?php

namespace App\NCUO\FoivBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * FoivItsMonitoringRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class FoivItsMonitoringRepository extends EntityRepository
{
    
    /**
     * Get cabinetSum
     *
     * @return integer 
     */
    public function countCabinets($foivId)
    {
        $foivId = intval($foivId);
        if( $foivId > 0 ){
            $em = $this->getEntityManager();
            return $em->createQuery(
                '
                SELECT count(u.id)
                FROM NCUOPortalBundle:User u where u.foiv = :id_foiv
                '
            )
            ->setParameter('id_foiv', $foivId)
            ->getSingleScalarResult();
            
        }else{
            return 0;
        }
    }
    
    /**
     * Get foiv cabinets
     *
     * @return NCUO\FoivPortal\Entity\User 
     */
    public function getFoivCabinets($foivId)
    {
        $foivId = intval($foivId);
        $em = $this->getEntityManager();
        return $em->createQuery(
            '
            SELECT *
            FROM NCUOPortalBundle:User u where u.foiv = :id_foiv
            '
        )
        ->setParameter('id_foiv', $foivId)
        ->getResult();
    }
    
    /**
     * Get emailSum
     *
     * @return integer 
     */
    public function countEmails($foivId, $email_host)
    {
        $foivId = intval($foivId);
        if( $foivId > 0 ){
            $em = $this->getEntityManager();
            return $em->createQuery(
                '
                SELECT count(u.id)
                FROM NCUOPortalBundle:User u where u.foiv = :id_foiv and u.email like :u_email
                '
            )
           //->andWhere('o.Product LIKE :product')
            ->setParameter('id_foiv', $foivId)
            ->setParameter('u_email', '%'.$email_host.'%')
            ->getSingleScalarResult();
            
        }else{
            return 0;
        }
    }
    
    /**
     * Count itsProtocol
     *
     * @return Array 
     */
    public function countItsProtocol($foivId)
    {
        
        $foivId = intval($foivId);
        $em = $this->getEntityManager();
        return $em->createQuery(
 /*           '
            SELECT
                COUNT(CASE WHEN s.protocolIts =0 THEN 1 END) AS not_signed,
                COUNT(CASE WHEN s.protocolIts =1 THEN 1 END) AS on_agreement,
                COUNT(CASE WHEN s.protocolIts =2 THEN 1 END) AS signed,
                COUNT(*) as total
            FROM NCUOFoivBundle:Systems s
            WHERE s.foiv = :id_foiv
            GROUP BY s.foiv            
            '
*/           
            '
            SELECT distinct
                ( SELECT 
                COUNT(a.id)
                FROM NCUOFoivBundle:Systems a
                WHERE a.foiv = :id_foiv AND a.protocolIts = 0 ) not_signed, 
                ( SELECT 
                COUNT(b.id)
                FROM NCUOFoivBundle:Systems b
                WHERE b.foiv = :id_foiv AND b.protocolIts = 1 ) on_agreement, 
                ( SELECT 
                COUNT(c.id)
                FROM NCUOFoivBundle:Systems c
                WHERE c.foiv = :id_foiv AND c.protocolIts = 2 ) signed
            FROM NCUOFoivBundle:Systems s
            WHERE s.foiv = :id_foiv
         '
        )
        ->setParameter('id_foiv', $foivId)
        ->getArrayResult();
    }
    
    /**
     * Get emailSum
     *
     * @return integer 
     */
    public function countSystems($foivId)
    {
        $foivId = intval($foivId);
        $em = $this->getEntityManager();
        return $em->createQuery(
            '
            SELECT COUNT(s.id)
            FROM NCUOFoivBundle:Systems s WHERE s.foiv = :id_foiv AND s.integrationSpo = 2
            '
        )
       //->andWhere('o.Product LIKE :product')
        ->setParameter('id_foiv', $foivId)
        ->getSingleScalarResult();
    }
    
    
    
}
